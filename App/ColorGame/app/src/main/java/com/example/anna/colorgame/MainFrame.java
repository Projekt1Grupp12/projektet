package com.example.anna.colorgame;import android.content.Context;import android.content.Intent;import android.graphics.Rect;import android.graphics.drawable.AnimationDrawable;import android.graphics.drawable.Drawable;import android.os.Bundle;import android.support.v7.app.AppCompatActivity;import android.text.InputFilter;import android.util.Log;import android.view.MotionEvent;import android.view.View;import android.view.inputmethod.InputMethodManager;import android.widget.AdapterView;import android.widget.AdapterView.OnItemSelectedListener;import android.widget.ArrayAdapter;import android.widget.Button;import android.widget.EditText;import android.widget.ImageView;import android.widget.Spinner;/** * This class is an activity that is a Login window for the application. * It has two EditText fields for IP-address and Username, a spinner with drop down menu where user * can select an IP-address from the list, and a "Login" button. If any of the EditText fields is of * incorrect format pushing button will trigger an AlertDialog to show information regarding * incorrect input. IP-address is validated when EditText field loses focus and if it is of * incorrect format an alert icon pops up on the right side of the EditText. * If everything is correct, pushing "Login" button will start an AsyncTask that sends data to server. * Response from server, that is User ID will be stored in a player instance. Next an Intent is * created to start next activity and send player instance to it. */public class MainFrame extends SuperActivity {    private static final String TAG = "debugFrame";    private String[] ipAdresses = {"Choose IP from the list.", "10.2.30.175", "10.2.19.28", "10.2.28.40"};    private Button loginButton = null;    private EditText editIPText = null;    private EditText editNameText = null;    private Context context;    private boolean correctIPInput = false;    private boolean correctNameInput = false;    //Variables for debugging app    private final boolean debug = false;    private final String debugIP = "10.2.28.40";    private final String debugUserName = "User0";    /**     * Method that has result from AsyncTask as parameter.     * It is used to get result from Asynctask and store it in player instance.     * And at last sendMessageToNextActivity method is called.     */    private AsyncResponse delegate = new AsyncResponse() {        @Override        public void postResult(String result) {            Log.d(TAG, "RESULTAT FRÃ…N SERVER " + result);            if (result.contains("SocketTimeoutException")) {                setAlertDialog(new AlertDialogClass("Connection failed", context,  "Connection to game server failed"));                getAlertDialog().ButtonOK();                loginButton.setEnabled(true);            }else if(!result.isEmpty()){                getPlayer().setUserID(result);                startNextActivity(getPlayer(),context, MainMenu.class);            }else {                setAlertDialog(new AlertDialogClass("No userID", context,  "You do not exist, please try again."));                getAlertDialog().ButtonOK();            }        }    };    @Override    protected void onCreate(Bundle savedInstanceState) {        Log.d(TAG, "onCreate()");        super.onCreate(savedInstanceState);        context=this;        setContentView(R.layout.activity_main_frame);        //alertDialog = new AlertDialogClass(MainFrame.this);        this.loginButton = (Button) findViewById(R.id.loginButton);        this.editNameText = (EditText) findViewById(R.id.editNameText);        this.editIPText = (EditText) findViewById(R.id.editIPText);        editNameText.setFilters(new InputFilter[]{                new InputFilter.LengthFilter(20) // 20 is max length of edittext        });        //This listener is called when focus state of editIPText is changed.        editIPText.setOnFocusChangeListener(new View.OnFocusChangeListener() {            @Override            public void onFocusChange(View view, boolean hasFocus) {                editIPText.setError(null);                correctIPInput = validateIP(editIPText.getText().toString());                if (!hasFocus) {                    Log.d(TAG, "When editIPText loses focus, validate ip");                    if (!correctIPInput) {                        editIPText.setError("Input is incorrect");                    }                }            }        });        //Spinner code here        final Spinner dynamicSpinner = (Spinner) findViewById(R.id.spinner);        ArrayAdapter<String> adapter = new ArrayAdapter<>(this, R.layout.my_spinner, ipAdresses);        adapter.setDropDownViewResource(R.layout.my_spinner_dropdown);        dynamicSpinner.setAdapter(adapter);        dynamicSpinner.setOnItemSelectedListener(new OnItemSelectedListener() {            @Override            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {                Log.d(TAG, "selection" + parent.getItemAtPosition(position));                selectionMade(dynamicSpinner, position);            }            @Override            public void onNothingSelected(AdapterView<?> adapterView) {            }        });        if (debug) {            this.editNameText.setText(debugUserName);//changed "" to null 05-09            editIPText.setText(debugIP);        }    }    @Override    protected void onResume() {        Log.d(TAG, "onResume");        super.onResume();    }    @Override    protected void onRestart() {        Log.d(TAG, "onRestart()");        super.onRestart();        if (debug) {            editNameText.setText(debugUserName);//changed "" to null 05-09            editIPText.setText(debugIP);        } else {            editNameText.setText(null);//changed "" to null 05-09            editIPText.setText(null);        }        loginButton.setEnabled(true);    }//DEBUG ???    @Override    protected void onDestroy() {        Log.d(TAG, "onDestroy");        super.onDestroy();    }    /**     * This method is called when the button is clicked.     * upadateIPName method is called to store input from user as data in variables.     * Next we send data to server to get back userID.     * @param view     */    public void login(View view) {//Button        Log.d(TAG, "Login button ");        loginButton.requestFocus();        correctNameInput = validateName(editNameText.getText().toString());        setPlayerIPName();        if (correctIPInput && correctNameInput) {            loginButton.setEnabled(false);            sendDataToServer("" + getPlayer().getName(),getPlayer(),this.delegate);        } else {            if (!correctIPInput && !correctNameInput) {                setAlertDialog(new AlertDialogClass(this, "Error", "IP-adress and username are incorrect.", " "));            } else if (!correctIPInput) {                setAlertDialog(new AlertDialogClass(this, "Error", "IP-adress is incorrect.", " "));            } else if (!correctNameInput) {                setAlertDialog(new AlertDialogClass(this, "Error", "Username is empty.", " "));            }            getAlertDialog().ButtonOK();        }    }    /**     * This method updates ip and name variables with user input.     */    private void setPlayerIPName() {        Log.d(TAG, "Set Players IP and Name");        getPlayer().setChoosenIP(editIPText.getText().toString());        getPlayer().setName(editNameText.getText().toString());    }    @Override    public boolean dispatchTouchEvent(MotionEvent ev) {        //Log.d(TAG, "inside dispatchTouchEvent");        boolean handleReturn = super.dispatchTouchEvent(ev);        View view = getCurrentFocus();        int x = (int) ev.getX();        int y = (int) ev.getY();        if (view instanceof EditText) {            View innerView = getCurrentFocus();            // Log.d(TAG, "view instanceof EditText");            if (ev.getAction() == MotionEvent.ACTION_UP &&                    !getLocationOnScreen((EditText) innerView).contains(x, y)) {                // Log.d(TAG, "ev.getAction() == MotionEvent.ACTION_UP");                InputMethodManager input = (InputMethodManager)                        getSystemService(MainFrame.this.INPUT_METHOD_SERVICE);                input.hideSoftInputFromWindow(getWindow().getCurrentFocus()                        .getWindowToken(), 0);            }        }        return handleReturn;    }    protected Rect getLocationOnScreen(EditText mEditText) {        Rect mRect = new Rect();        int[] location = new int[2];        mEditText.getLocationOnScreen(location);        mRect.left = location[0];        mRect.top = location[1];        mRect.right = location[0] + mEditText.getWidth();        mRect.bottom = location[1] + mEditText.getHeight();        return mRect;    }    /**     * This method is called by Spinners onItemSelectedListener.     * When user select an item from the list it is set as text in the IP-address EditText field.     * Selection is then reset to default position, this way it is possible to select same item.     * @param dynamicSpinner     * @param position     */    private void selectionMade(Spinner dynamicSpinner, int position) {        switch (position) {            case 0:                // Whatever you want to happen when the first item gets selected                break;            case 1:                editIPText.setText(ipAdresses[1]);                editIPText.requestFocus();                dynamicSpinner.setSelection(0);                break;            case 2:                editIPText.setText(ipAdresses[2]);                editIPText.requestFocus();                dynamicSpinner.setSelection(0);                break;            case 3:                editIPText.setText(ipAdresses[3]);                editIPText.requestFocus();                dynamicSpinner.setSelection(0);                break;        }    }}