package com.example.anna.colorgame;import android.app.Activity;import android.content.Intent;import android.content.res.AssetFileDescriptor;import android.media.MediaPlayer;import android.os.Bundle;import android.util.Log;import android.view.MenuItem;import android.view.View;import android.widget.Button;import java.io.IOException;/** * This class is MainMenu activity of the application. The view of this activity differ for * User with ID 0 and for User with ID 1. * User 0 has a Join and HighScore buttons on the screen and User 1 has ChooseGame and HighScore * buttons. * Join button is deactivated until User 0 have choosen the game. * ChooseGame button is deactivated until User 1 have logged in. * Pushing ChooseGame button starts next ChooseGame Activity where User0 may choose the game. * Pushing Join button sends data to server. Data is a message that User 1 is ready to play. */public class MainMenu extends SuperActivity {    private static final String TAG = "debugMenu";    private Button chooseGameBtn;    private Class nextActivity = null;    private MediaPlayer mpMenu = null;    private AsyncResponse delegate = new AsyncResponse() {        @Override        public void postResult(String result) {            Log.d(TAG, "RESULTAT FRÃ…N SERVER " + result);            if (result.contains("SocketTimeOut")) {                //do nothing when SocketTimeOut exception            }        }    };    /**     * In this onCreate method Intent is used to get data sent from previous activity. Next Thread     * is started it listens for incoming data from server. If userId is "0" then message to server     * is sent using ConnectToServer class.     * Button is initiated with text depending on userID and is disabled.     *     * @param savedInstanceState Bundle     */    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.main_menu);        Log.i(TAG, "onCreate(). MainMenu");        Intent intent = getIntent();        setPlayer((Player) intent.getSerializableExtra("player"));        startThreadMainMenu(this, getPlayer(), MainMenu.this);        chooseGameBtn = (Button) findViewById(R.id.choose_game_button);        if (getPlayer().getUserID().equals("0")) {            sendDataToServer("choosegame?;0", getPlayer(), this.delegate);            chooseGameBtn.setText("Choose Game");            chooseGameBtn.setEnabled(false);        } else if (getPlayer().getUserID().equals("1")) {            chooseGameBtn.setText("Join Game");            chooseGameBtn.setEnabled(false);        }    }    /**     * When this method is called MediaPlayer object is instantiated with file and mpMenu.start() is     * called to start music.     */    @Override    protected void onResume() {//added 05-16 for thread        Log.d(TAG, "onResume() ");        this.mpMenu = MediaPlayer.create(this, R.raw.dxnbeats_waiting);        try {            AssetFileDescriptor afd;            afd = getAssets().openFd("dxnbeats_waiting.mp3");            mpMenu.reset();            mpMenu.setDataSource(afd.getFileDescriptor(), afd.getStartOffset(), afd.getLength());            mpMenu.setLooping(true);            mpMenu.prepare();            mpMenu.start();        } catch (IOException e) {            e.printStackTrace();        }        super.onResume();    }    /**     * When this method is called closeThread() method is called to stop the thread and mpMenu.stop()     * is called to stop the music.     */    @Override    protected void onStop() {        Log.d(TAG, "onStop() ");        closeThread();        mpMenu.stop();        super.onStop();    }    /**     * BUTTON onClick method     * This method is called when button "Choose Game" is clicked.     * It starts next activity and sends data to it using Intent class.     *     * @param view View     */    public void chooseGame(View view) {//BUTTON        Log.d(TAG, "Button Choose Game or Join Game is clicked");        if (getPlayer().getUserID().equals("0")) {            startNextActivity(getPlayer(), this, ChooseGame.class);        }        if (getPlayer().getUserID().equals("1")) {            sendDataToServer("ready;1", getPlayer(), this.delegate);            startProgressDialog("Starting...", this);        }        if (getPlayer() == null) {            Log.d(TAG, "Player null");        }    }    /**     * BUTTON onClick method     * This method is called when user pushes HighScore button.     * It starts next activity HighScore.     *     * @param view View     */    public void showHighScore(View view) {//BUTTON        startNextActivity(getPlayer(), this, HighScore.class);    }    /**     * Starts new activity(Game) specified by nextActivity variable.     */    public void startGame() {        closeProgressDialog();        startNextActivity(getPlayer(), this, nextActivity);    }    /**     * This method is used to activate ChooseGame button when we get message from server that User1     * has logged in.     */    public void setButtonActive() {        this.chooseGameBtn.setEnabled(true);    }//is used in a while loop    /**     * This method is used to set nextActivity variable in MainMenu class to specified data we got     * from server.     *     * @param game String     */    public void setNextActivityGame(String game) {        if (game.contains(("Puzzle"))) {//if server sends PuzzleGame start PuzzleGame            nextActivity = PuzzleGame.class;        } else if (game.contains(("Traffic"))) {            nextActivity = TrafficGame.class;        } else if (game.contains(("Duel"))) {            nextActivity = DuelGame.class;        } else if (game.contains(("Deathmatch"))) {            nextActivity = DeathMatchGame.class;        }    }    /**     * This method is called when user is navigated to this activity from child activity.     *     * @param child Activity     * @return boolean     */    @Override    public boolean onNavigateUpFromChild(Activity child) {        Log.d(TAG, "onNavigationUpFromChild");        onBackPressed();        return true;    }    /**     * This method is called when user push "UP" button on the screen.     * onBackPressed() method is called to show AlertDialog.     *     * @param item MenuItem     * @return boolean     */    @Override    public boolean onOptionsItemSelected(MenuItem item) {        switch (item.getItemId()) {            case android.R.id.home:                onBackPressed();                break;        }        return true;    }    /**     * This method is called when user pushes "Back" button on the screen. AlertDialog is shown     * informing user that he/she will be logged out and"logout" message is sent to server.     */    @Override    public void onBackPressed() {        new GameOver(this, getPlayer(), "logout");    }}