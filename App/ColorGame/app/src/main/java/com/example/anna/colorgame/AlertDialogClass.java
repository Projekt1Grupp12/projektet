package com.example.anna.colorgame;import android.content.Context;import android.content.DialogInterface;import android.content.Intent;import android.support.v7.app.AlertDialog;import android.util.Log;import static android.support.v7.app.AlertDialog.BUTTON_NEGATIVE;import static android.support.v7.app.AlertDialog.BUTTON_NEUTRAL;import static android.support.v7.app.AlertDialog.BUTTON_POSITIVE;import static android.support.v7.app.AlertDialog.OnClickListener;import static android.support.v7.app.AlertDialog.OnDismissListener;/** * This class is used to easily create different alert-dialogs with custom title, message text and * buttons, and to show it in specified activity */public class AlertDialogClass {    private String TAG = "DialogClassDebug";    private AlertDialog builder = null;    private String answer = null;    private Player player = null;    private Context context;    private String dataMessage = null; //contains a message regarding what kind of action should be executed onDismissed dialog    private Class MainFrame = MainFrame.class;    private Class ChooseGame = ChooseGame.class;    private Class MainMenu = MainMenu.class;    private HighScore HighScoreClass = null;    private boolean booleanYesNo = false;    /**     * This is an onClickListener that is called when button in an AlertDialog is pushed.     * It initiates answer variable with value.     */    private OnClickListener onClickListener = new OnClickListener() {        @Override        public void onClick(DialogInterface dialog, int which) {            Log.d(TAG, "OnClickListener");            switch (which) {                case BUTTON_NEUTRAL:                    Log.d(TAG, "OK button pressed");                    setAnswer("OK");                    break;                case BUTTON_POSITIVE:                    Log.d(TAG, "YES button pressed");                    setAnswer("YES");                    break;                case BUTTON_NEGATIVE:                    Log.d(TAG, "NO button pressed");                    setAnswer("NO");                    break;            }            builder.dismiss();        }    };    /**     * This is an onDismissListener that is called when AlertDialog is dismissed. Then actions is     * taken depending on different data that is specified for the AlertDialog. For example sends     * logout message to server, shows different AlertDialog or starts new activity.     */    private OnDismissListener onDismissListener = new OnDismissListener() {        @Override        public void onDismiss(DialogInterface dialog) {            Log.d(TAG, "Dialog dismissed");            if (player == null) {                Log.d(TAG, "player == null");            }            Log.d(TAG, "answer: " + String.valueOf(answer));            if (answer == null && !booleanYesNo) {                setAnswer("OK");            } else if (answer == null && booleanYesNo) {                setAnswer("NO");            }            if (answer.contains("YES")) {                if (player.getUserID().contains("0")) {                    sendMessageToNextActivity(ChooseGame, player);                } else {                    sendMessageToNextActivity(MainMenu, player);                }            } else if (answer.contains("NO")) {                sendLogoutToServer(player);                sendMessageToNextActivity(MainFrame, player);            } else if (answer.contains("OK")) {                if (context.getClass().getName().contains("Game")) {                    if (dataMessage.contains("Give") || dataMessage.contains("logout")) {                        sendLogoutToServer(player);                        sendMessageToNextActivity(MainFrame, player);                    } else if (dataMessage.contains("WIN!") || dataMessage.contains("LOSE!")) {                        AlertDialogClass adc = new AlertDialogClass(context, "New game?", "Do you want to play again?", " ");                        adc.setPlayer(player);                        adc.ButtonYesNo();                    }                } else if (context.getClass().getName().contains("HighScore")) {                    HighScoreClass.onBackPressed();                } else if (context.getClass().getName().contains("MainMenu")) {                    Log.d(TAG, "else, answer: logout from MainMenu");                    sendLogoutToServer(player);                    sendMessageToNextActivity(MainFrame, player);                }            }        }    };    /**     * This constructor creates an AlertDialog with empty title and a message that will be specified     * by dataMessage parameter and it will be shown in specified context.     *     * @param context     Context     * @param dataMessage String     */    public AlertDialogClass(Context context, String dataMessage) {        this(context, " ", dataMessage);    }    /**     * This constructor creates an AlertDialog with specified title and message that will     * be specified by dataMessage parameter and shown in specified context.     * This method is mostly used in MainFrame, MainMenu, ChooseGame and HighScore activities.     *     * @param context     Context     * @param title       String     * @param dataMessage String     */    public AlertDialogClass(Context context, String title, String dataMessage) {        this(context, title, " ", dataMessage);    }    /**     * This constructor creates an AlertDialog with specified title and message to be shown in     * specified context.     * dataMessage is not required     *     * @param context     Context     * @param title       String     * @param message     String     * @param dataMessage String     */    public AlertDialogClass(Context context, String title, String message, String dataMessage) {        Log.d(TAG, "AlertDialog Constructor");        this.context = context;        AlertDialog builder = new AlertDialog.Builder(context).create();        this.dataMessage = dataMessage;        this.builder = builder;        this.setTitleMessage(title, message);        builder.setCanceledOnTouchOutside(false);    }    /**     * This constructor creates an instance of AlertDialogClass with specified title, message and     * dataMessage to be shown in specified activity HighScore.     *     * @param thisClass   HighScore class     * @param title       String     * @param message     String     * @param dataMessage String     */    public AlertDialogClass(HighScore thisClass, String title, String message, String dataMessage) {        Log.d(TAG, "AlertDialog Constructor");        this.context = thisClass;        AlertDialog builder = new AlertDialog.Builder(thisClass).create();        this.dataMessage = dataMessage;        this.builder = builder;        this.setTitleMessage(title, message);        builder.setCanceledOnTouchOutside(false);        this.HighScoreClass = thisClass;    }    /**     * This method is used to set specified text as title of the AlertDialog.     *     * @param title String     */    public void setTitleOfAlertDialog(String title) {        Log.d(TAG, "setTitleOfAlertDialog()");        builder.setTitle(title);    }    /**     * This method is used to set specified text as message of the AlertDialog.     *     * @param message String     */    public void setTextToShowInAlertDialog(String message) {        Log.d(TAG, "setMssage()");        builder.setMessage(message);    }    /**     * Adds an OK button with onClickListener to AlertDialog, adds an onDismissListener and shows     * AlertDialog in an activity specified in the constructor.     */    public void ButtonOK() {        Log.d(TAG, "ButtonOK()");        builder.setButton(BUTTON_NEUTRAL, "OK", onClickListener);        builder.setOnDismissListener(onDismissListener);        builder.show();    }    /**     * Adds two buttons "YES and NO" with onClickListener to AlertDialog, adds an onDismissListener     * and shows AlertDialog in an activity specified in the constructor.     */    public void ButtonYesNo() {        booleanYesNo = true;        Log.d(TAG, "ButtonYesNo");        builder.setButton(BUTTON_POSITIVE, "Yes", onClickListener);        builder.setButton(BUTTON_NEGATIVE, "No", onClickListener);        builder.setOnDismissListener(onDismissListener);        builder.show();    }    /**     * This method sets answer to specified value. Answer is users button choice "YES, NO, OK".     *     * @param answer String     */    private void setAnswer(String answer) {        this.answer = answer;    }    /**     * This method sets player variable to specified value. Player variable is an instance of player     * class.     *     * @param player Player     */    public void setPlayer(Player player) {        this.player = new Player(player.getName(), player.getUserID(), player.getChoosenIP());    }    /**     * This method is used to initiate AlertDialog with specified title and text message.     *     * @param title   String     * @param message String     */    public void setTitleMessage(String title, String message) {        setTitleOfAlertDialog(title);        setTextToShowInAlertDialog(message);    }    /**     * This method creates an intent with flag set, sends data stored is player variable to next     * activity. Starts next activity.     *     * @param startClass Class     * @param player Player     */    private void sendMessageToNextActivity(Class startClass, Player player) {        Log.d(TAG, "Creating new intent and sending data");        Intent intent = new Intent(context, startClass);        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);        intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);        intent.putExtra("player", player);        Log.d(TAG, "Starting new Activity");        context.startActivity(intent);    }    /**     * This method is used to send logout message to server.     *     * @param player Player     */    private void sendLogoutToServer(Player player) {        ConnectToServer connectToServer = new ConnectToServer(player);        System.gc();        connectToServer.execute("logout" + ";" + player.getUserID());    }}